# Creating an App for jsWin

## Folder Structure
Your app should follow this structure within the `apps` folder:

```
/your-project/
  index.html  <-- Main file that loads jsWin
  /images/    <-- jsWin system images
  /css/       <-- jsWin system CSS
  /scripts/   <-- jsWin system scripts
  /apps/
    /appname/
      appconfig.json  <-- JSON describing the app window
      /html/
        appcontent.html <-- HTML content for the main app window
      /images/     <-- Any images needed by your app
      /css/        <-- Any styles specific to your app
      /scripts/    <-- Any JavaScript files for your app
```

## Creating `appconfig.json`
Each app must include a JSON file defining how the window is created and initialized. Below is an example configuration:
Note: the content field could be a URL to an html file, as in the live example. The system will evaluate it to a string and put it back into the content field.

```json
{
  "title": "Increment",
  "content": "<div id='incrementapp{{pane.objID}}'>\n  <span id='numberbox{{pane.objID}}' jsw-bind='number{{pane.objID}}'></span><br /><button jsw-click='system.options.data.increment{{pane.objID}}.increment();'>Click to Increment</button></div>",
  "id": 301,
  "width": 200,
  "height": 100,
  "oneInstance": false,
  "requireJS": [
    "/apps/increment/scripts/increment.js",
    "/apps/increment/scripts/anotherScript.js"
  ],
  "onLoad": "system.options.data[\"increment\" + pane.objID] = new INCREMENT(system, pane);", 
  "onExit": "options.scriptname = undefined; SCRIPTNAME = undefined;"
}
```

## Understanding the `pane` Object and `objID`
Each app window is represented by a `pane` object, which contains all details about the app instance, including:
- The **defaults** set in the JSON file
- A unique **`objID`** assigned when the window is created

The `objID` ensures that each window instance is **independent** from others. This means multiple instances of the same app can run simultaneously without interfering with each other. 

## The `system` Object
The `system` object is passed into each app and provides:
- **System functions** (e.g., open dialogs, manage child windows)
- **`system.options`** – Contains jsWin configuration, allowing changes like theme and background updates
- **`system.options.data`** – Stores all app-related data, including script objects for tracking instances

## Initializing and Cleaning Up an App
Unlike older versions where apps started automatically, **all app logic should be inside `onLoad` and `onExit` functions**.

### `onLoad` (App Initialization)
The `onLoad` function is **called when the window is opened** and creates a new instance of the app, using `objID` to keep it separate.

Example (Incrementer App):

```js
class INCREMENT {
    constructor(system, pane){
        this.system = system;
        this.pane = pane;
        this._number = 0;
        this.system.options.data["number" + this.pane.objID] = this._number;
    }

    increment() {
        this._number++;
        this.system.options.data["number" + this.pane.objID] = this._number;
    }

    get number() {
        return this._number;
    }
}
```

This ensures each window gets **its own counter** tracked separately in `system.options.data`.

### `onExit` (Cleanup Function)
The `onExit` function removes the app instance when the window is closed:

```js
"onExit": "delete system.options.data[\"increment\" + pane.objID];"
```

This prevents lingering references and ensures clean memory management.

## Managing Multiple Scripts
The `requireJS` field in the JSON is an array, meaning you can load multiple scripts separated by commas. It is good practice to initialize just an **app manager** here, keeping the data object uncluttered. The app manager can then initialize other components as local members.

Example:
```js
class IncrementManager {
    constructor(system, pane) {
        this.incrementApp = new INCREMENT(system, pane);
    }
}

"onLoad": "system.options.data[\"increment\" + pane.objID] = new IncrementManager(system, pane);"
```

This ensures all related functionality is encapsulated within the app manager.

## Including HTML Directly in `content`
Instead of referencing an external file, you can **embed HTML directly in the `content` field** of the JSON. This can be useful for small apps or dynamically built apps that only need a starting div. However, for complex apps, using an external HTML file is recommended as it is easier to edit and manage.

## Loading Scripts in HTML
While scripts **can** be loaded directly in the HTML content, it is important to note that they may not execute properly in all cases. Any required **CSS must also be included** directly in the HTML when not referenced separately.

## Loading an App
To open an app manually, use:
```js
system.openWindow("/apps/increment/incrementer.json");
```

Alternatively, on a PHP server:
```js
system.openWindow("/apps/chess/chess.php");
```

## Summary
✅ **Follow the structured folder layout**  
✅ **Define your app in a JSON or PHP configuration file**  
✅ **Use `objID` to keep instances separate**  
✅ **Use `onLoad` for initialization**  
✅ **Use `onExit` for cleanup**  
✅ **Store app state in `system.options.data`**  
✅ **List required scripts in `requireJS`**  
✅ **Use an app manager to keep scripts organized**  
✅ **Load apps dynamically with `system.openWindow()`**  
✅ **Choose between external HTML or inline `content` for flexibility**  

This approach ensures apps are modular, maintainable, and integrate seamlessly with jsWin!

